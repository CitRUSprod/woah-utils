import {
    isUndefined,
    isNull,
    isNil,
    isBoolean,
    isNumber,
    isBigInt,
    isString,
    isSymbol,
    isObject,
    isArray,
    isFunction,
    isPromise,
    isObjectLike
} from "$/is-type"

import "jest-extended"

describe("isUndefined function", () => {
    test("should return true", () => {
        expect(isUndefined(undefined)).toBeTrue()
    })

    test("should return false", () => {
        expect(isUndefined(null)).toBeFalse()
        expect(isUndefined(false)).toBeFalse()
        expect(isUndefined(true)).toBeFalse()
        expect(isUndefined(-1)).toBeFalse()
        expect(isUndefined(0)).toBeFalse()
        expect(isUndefined(1)).toBeFalse()
        expect(isUndefined(-Infinity)).toBeFalse()
        expect(isUndefined(Infinity)).toBeFalse()
        expect(isUndefined(NaN)).toBeFalse()
        expect(isUndefined(-1n)).toBeFalse()
        expect(isUndefined(0n)).toBeFalse()
        expect(isUndefined(1n)).toBeFalse()
        expect(isUndefined("")).toBeFalse()
        expect(isUndefined("abc")).toBeFalse()
        expect(isUndefined(Symbol("abc"))).toBeFalse()
        expect(isUndefined({})).toBeFalse()
        expect(isUndefined({ a: 1 })).toBeFalse()
        expect(isUndefined([])).toBeFalse()
        expect(isUndefined([1, 2])).toBeFalse()
        expect(isUndefined(() => {})).toBeFalse()
        expect(isUndefined(Promise.resolve())).toBeFalse()
        expect(isUndefined(/a/)).toBeFalse()
        expect(isUndefined(new Date())).toBeFalse()
    })
})

describe("isNull function", () => {
    test("should return true", () => {
        expect(isNull(null)).toBeTrue()
    })

    test("should return false", () => {
        expect(isNull(undefined)).toBeFalse()
        expect(isNull(false)).toBeFalse()
        expect(isNull(true)).toBeFalse()
        expect(isNull(-1)).toBeFalse()
        expect(isNull(0)).toBeFalse()
        expect(isNull(1)).toBeFalse()
        expect(isNull(-Infinity)).toBeFalse()
        expect(isNull(Infinity)).toBeFalse()
        expect(isNull(NaN)).toBeFalse()
        expect(isNull(-1n)).toBeFalse()
        expect(isNull(0n)).toBeFalse()
        expect(isNull(1n)).toBeFalse()
        expect(isNull("")).toBeFalse()
        expect(isNull("abc")).toBeFalse()
        expect(isNull(Symbol("abc"))).toBeFalse()
        expect(isNull({})).toBeFalse()
        expect(isNull({ a: 1 })).toBeFalse()
        expect(isNull([])).toBeFalse()
        expect(isNull([1, 2])).toBeFalse()
        expect(isNull(() => {})).toBeFalse()
        expect(isNull(Promise.resolve())).toBeFalse()
        expect(isNull(/a/)).toBeFalse()
        expect(isNull(new Date())).toBeFalse()
    })
})

describe("isNil function", () => {
    test("should return true", () => {
        expect(isNil(undefined)).toBeTrue()
        expect(isNil(null)).toBeTrue()
    })

    test("should return false", () => {
        expect(isNil(false)).toBeFalse()
        expect(isNil(true)).toBeFalse()
        expect(isNil(-1)).toBeFalse()
        expect(isNil(0)).toBeFalse()
        expect(isNil(1)).toBeFalse()
        expect(isNil(-Infinity)).toBeFalse()
        expect(isNil(Infinity)).toBeFalse()
        expect(isNil(NaN)).toBeFalse()
        expect(isNil(-1n)).toBeFalse()
        expect(isNil(0n)).toBeFalse()
        expect(isNil(1n)).toBeFalse()
        expect(isNil("")).toBeFalse()
        expect(isNil("abc")).toBeFalse()
        expect(isNil(Symbol("abc"))).toBeFalse()
        expect(isNil({})).toBeFalse()
        expect(isNil({ a: 1 })).toBeFalse()
        expect(isNil([])).toBeFalse()
        expect(isNil([1, 2])).toBeFalse()
        expect(isNil(() => {})).toBeFalse()
        expect(isNil(Promise.resolve())).toBeFalse()
        expect(isNil(/a/)).toBeFalse()
        expect(isNil(new Date())).toBeFalse()
    })
})

describe("isBoolean function", () => {
    test("should return true", () => {
        expect(isBoolean(false)).toBeTrue()
        expect(isBoolean(true)).toBeTrue()
    })

    test("should return false", () => {
        expect(isBoolean(undefined)).toBeFalse()
        expect(isBoolean(null)).toBeFalse()
        expect(isBoolean(-1)).toBeFalse()
        expect(isBoolean(0)).toBeFalse()
        expect(isBoolean(1)).toBeFalse()
        expect(isBoolean(-Infinity)).toBeFalse()
        expect(isBoolean(Infinity)).toBeFalse()
        expect(isBoolean(NaN)).toBeFalse()
        expect(isBoolean(-1n)).toBeFalse()
        expect(isBoolean(0n)).toBeFalse()
        expect(isBoolean(1n)).toBeFalse()
        expect(isBoolean("")).toBeFalse()
        expect(isBoolean("abc")).toBeFalse()
        expect(isBoolean(Symbol("abc"))).toBeFalse()
        expect(isBoolean({})).toBeFalse()
        expect(isBoolean({ a: 1 })).toBeFalse()
        expect(isBoolean([])).toBeFalse()
        expect(isBoolean([1, 2])).toBeFalse()
        expect(isBoolean(() => {})).toBeFalse()
        expect(isBoolean(Promise.resolve())).toBeFalse()
        expect(isBoolean(/a/)).toBeFalse()
        expect(isBoolean(new Date())).toBeFalse()
    })
})

describe("isNumber function", () => {
    test("should return true", () => {
        expect(isNumber(-1)).toBeTrue()
        expect(isNumber(0)).toBeTrue()
        expect(isNumber(1)).toBeTrue()
        expect(isNumber(-Infinity)).toBeTrue()
        expect(isNumber(Infinity)).toBeTrue()
        expect(isNumber(NaN)).toBeTrue()
    })

    test("should return false", () => {
        expect(isNumber(undefined)).toBeFalse()
        expect(isNumber(null)).toBeFalse()
        expect(isNumber(false)).toBeFalse()
        expect(isNumber(true)).toBeFalse()
        expect(isNumber(-1n)).toBeFalse()
        expect(isNumber(0n)).toBeFalse()
        expect(isNumber(1n)).toBeFalse()
        expect(isNumber("")).toBeFalse()
        expect(isNumber("abc")).toBeFalse()
        expect(isNumber(Symbol("abc"))).toBeFalse()
        expect(isNumber({})).toBeFalse()
        expect(isNumber({ a: 1 })).toBeFalse()
        expect(isNumber([])).toBeFalse()
        expect(isNumber([1, 2])).toBeFalse()
        expect(isNumber(() => {})).toBeFalse()
        expect(isNumber(Promise.resolve())).toBeFalse()
        expect(isNumber(/a/)).toBeFalse()
        expect(isNumber(new Date())).toBeFalse()
    })
})

describe("isBigInt function", () => {
    test("should return true", () => {
        expect(isBigInt(-1n)).toBeTrue()
        expect(isBigInt(0n)).toBeTrue()
        expect(isBigInt(1n)).toBeTrue()
    })

    test("should return false", () => {
        expect(isBigInt(undefined)).toBeFalse()
        expect(isBigInt(null)).toBeFalse()
        expect(isBigInt(false)).toBeFalse()
        expect(isBigInt(true)).toBeFalse()
        expect(isBigInt(-1)).toBeFalse()
        expect(isBigInt(0)).toBeFalse()
        expect(isBigInt(1)).toBeFalse()
        expect(isBigInt(-Infinity)).toBeFalse()
        expect(isBigInt(Infinity)).toBeFalse()
        expect(isBigInt(NaN)).toBeFalse()
        expect(isBigInt("")).toBeFalse()
        expect(isBigInt("abc")).toBeFalse()
        expect(isBigInt(Symbol("abc"))).toBeFalse()
        expect(isBigInt({})).toBeFalse()
        expect(isBigInt({ a: 1 })).toBeFalse()
        expect(isBigInt([])).toBeFalse()
        expect(isBigInt([1, 2])).toBeFalse()
        expect(isBigInt(() => {})).toBeFalse()
        expect(isBigInt(Promise.resolve())).toBeFalse()
        expect(isBigInt(/a/)).toBeFalse()
        expect(isBigInt(new Date())).toBeFalse()
    })
})

describe("isString function", () => {
    test("should return true", () => {
        expect(isString("")).toBeTrue()
        expect(isString("abc")).toBeTrue()
    })

    test("should return false", () => {
        expect(isString(undefined)).toBeFalse()
        expect(isString(null)).toBeFalse()
        expect(isString(false)).toBeFalse()
        expect(isString(true)).toBeFalse()
        expect(isString(-1)).toBeFalse()
        expect(isString(0)).toBeFalse()
        expect(isString(1)).toBeFalse()
        expect(isString(-Infinity)).toBeFalse()
        expect(isString(Infinity)).toBeFalse()
        expect(isString(NaN)).toBeFalse()
        expect(isString(-1n)).toBeFalse()
        expect(isString(0n)).toBeFalse()
        expect(isString(1n)).toBeFalse()
        expect(isString(Symbol("abc"))).toBeFalse()
        expect(isString({})).toBeFalse()
        expect(isString({ a: 1 })).toBeFalse()
        expect(isString([])).toBeFalse()
        expect(isString([1, 2])).toBeFalse()
        expect(isString(() => {})).toBeFalse()
        expect(isString(Promise.resolve())).toBeFalse()
        expect(isString(/a/)).toBeFalse()
        expect(isString(new Date())).toBeFalse()
    })
})

describe("isSymbol function", () => {
    test("should return true", () => {
        expect(isSymbol(Symbol("abc"))).toBeTrue()
    })

    test("should return false", () => {
        expect(isSymbol(undefined)).toBeFalse()
        expect(isSymbol(null)).toBeFalse()
        expect(isSymbol(false)).toBeFalse()
        expect(isSymbol(true)).toBeFalse()
        expect(isSymbol(-1)).toBeFalse()
        expect(isSymbol(0)).toBeFalse()
        expect(isSymbol(1)).toBeFalse()
        expect(isSymbol(-Infinity)).toBeFalse()
        expect(isSymbol(Infinity)).toBeFalse()
        expect(isSymbol(NaN)).toBeFalse()
        expect(isSymbol(-1n)).toBeFalse()
        expect(isSymbol(0n)).toBeFalse()
        expect(isSymbol(1n)).toBeFalse()
        expect(isSymbol("")).toBeFalse()
        expect(isSymbol("abc")).toBeFalse()
        expect(isSymbol({})).toBeFalse()
        expect(isSymbol({ a: 1 })).toBeFalse()
        expect(isSymbol([])).toBeFalse()
        expect(isSymbol([1, 2])).toBeFalse()
        expect(isSymbol(() => {})).toBeFalse()
        expect(isSymbol(Promise.resolve())).toBeFalse()
        expect(isSymbol(/a/)).toBeFalse()
        expect(isSymbol(new Date())).toBeFalse()
    })
})

describe("isObject function", () => {
    test("should return true", () => {
        expect(isObject({})).toBeTrue()
        expect(isObject({ a: 1 })).toBeTrue()
    })

    test("should return false", () => {
        expect(isObject(undefined)).toBeFalse()
        expect(isObject(null)).toBeFalse()
        expect(isObject(false)).toBeFalse()
        expect(isObject(true)).toBeFalse()
        expect(isObject(-1)).toBeFalse()
        expect(isObject(0)).toBeFalse()
        expect(isObject(1)).toBeFalse()
        expect(isObject(-Infinity)).toBeFalse()
        expect(isObject(Infinity)).toBeFalse()
        expect(isObject(NaN)).toBeFalse()
        expect(isObject(-1n)).toBeFalse()
        expect(isObject(0n)).toBeFalse()
        expect(isObject(1n)).toBeFalse()
        expect(isObject("")).toBeFalse()
        expect(isObject("abc")).toBeFalse()
        expect(isObject(Symbol("abc"))).toBeFalse()
        expect(isObject([])).toBeFalse()
        expect(isObject([1, 2])).toBeFalse()
        expect(isObject(() => {})).toBeFalse()
        expect(isObject(Promise.resolve())).toBeFalse()
        expect(isObject(/a/)).toBeFalse()
        expect(isObject(new Date())).toBeFalse()
    })
})

describe("isArray function", () => {
    test("should return true", () => {
        expect(isArray([])).toBeTrue()
        expect(isArray([1, 2])).toBeTrue()
    })

    test("should return false", () => {
        expect(isArray(undefined)).toBeFalse()
        expect(isArray(null)).toBeFalse()
        expect(isArray(false)).toBeFalse()
        expect(isArray(true)).toBeFalse()
        expect(isArray(-1)).toBeFalse()
        expect(isArray(0)).toBeFalse()
        expect(isArray(1)).toBeFalse()
        expect(isArray(-Infinity)).toBeFalse()
        expect(isArray(Infinity)).toBeFalse()
        expect(isArray(NaN)).toBeFalse()
        expect(isArray(-1n)).toBeFalse()
        expect(isArray(0n)).toBeFalse()
        expect(isArray(1n)).toBeFalse()
        expect(isArray("")).toBeFalse()
        expect(isArray("abc")).toBeFalse()
        expect(isArray(Symbol("abc"))).toBeFalse()
        expect(isArray({})).toBeFalse()
        expect(isArray({ a: 1 })).toBeFalse()
        expect(isArray(() => {})).toBeFalse()
        expect(isArray(Promise.resolve())).toBeFalse()
        expect(isArray(/a/)).toBeFalse()
        expect(isArray(new Date())).toBeFalse()
    })
})

describe("isFunction function", () => {
    test("should return true", () => {
        expect(isFunction(() => {})).toBeTrue()
    })

    test("should return false", () => {
        expect(isFunction(undefined)).toBeFalse()
        expect(isFunction(null)).toBeFalse()
        expect(isFunction(false)).toBeFalse()
        expect(isFunction(true)).toBeFalse()
        expect(isFunction(-1)).toBeFalse()
        expect(isFunction(0)).toBeFalse()
        expect(isFunction(1)).toBeFalse()
        expect(isFunction(-Infinity)).toBeFalse()
        expect(isFunction(Infinity)).toBeFalse()
        expect(isFunction(NaN)).toBeFalse()
        expect(isFunction(-1n)).toBeFalse()
        expect(isFunction(0n)).toBeFalse()
        expect(isFunction(1n)).toBeFalse()
        expect(isFunction("")).toBeFalse()
        expect(isFunction("abc")).toBeFalse()
        expect(isFunction(Symbol("abc"))).toBeFalse()
        expect(isFunction({})).toBeFalse()
        expect(isFunction({ a: 1 })).toBeFalse()
        expect(isFunction([])).toBeFalse()
        expect(isFunction([1, 2])).toBeFalse()
        expect(isFunction(Promise.resolve())).toBeFalse()
        expect(isFunction(/a/)).toBeFalse()
        expect(isFunction(new Date())).toBeFalse()
    })
})

describe("isPromise function", () => {
    test("should return true", () => {
        expect(isPromise(Promise.resolve())).toBeTrue()
    })

    test("should return false", () => {
        expect(isPromise(undefined)).toBeFalse()
        expect(isPromise(null)).toBeFalse()
        expect(isPromise(false)).toBeFalse()
        expect(isPromise(true)).toBeFalse()
        expect(isPromise(-1)).toBeFalse()
        expect(isPromise(0)).toBeFalse()
        expect(isPromise(1)).toBeFalse()
        expect(isPromise(-Infinity)).toBeFalse()
        expect(isPromise(Infinity)).toBeFalse()
        expect(isPromise(NaN)).toBeFalse()
        expect(isPromise(-1n)).toBeFalse()
        expect(isPromise(0n)).toBeFalse()
        expect(isPromise(1n)).toBeFalse()
        expect(isPromise("")).toBeFalse()
        expect(isPromise("abc")).toBeFalse()
        expect(isPromise(Symbol("abc"))).toBeFalse()
        expect(isPromise({})).toBeFalse()
        expect(isPromise({ a: 1 })).toBeFalse()
        expect(isPromise([])).toBeFalse()
        expect(isPromise([1, 2])).toBeFalse()
        expect(isPromise(() => {})).toBeFalse()
        expect(isPromise(/a/)).toBeFalse()
        expect(isPromise(new Date())).toBeFalse()
    })
})

describe("isObjectLike function", () => {
    test("should return true", () => {
        expect(isObjectLike({})).toBeTrue()
        expect(isObjectLike({ a: 1 })).toBeTrue()
        expect(isObjectLike([])).toBeTrue()
        expect(isObjectLike([1, 2])).toBeTrue()
        expect(isObjectLike(() => {})).toBeTrue()
        expect(isObjectLike(Promise.resolve())).toBeTrue()
        expect(isObjectLike(/a/)).toBeTrue()
        expect(isObjectLike(new Date())).toBeTrue()
    })

    test("should return false", () => {
        expect(isObjectLike(undefined)).toBeFalse()
        expect(isObjectLike(null)).toBeFalse()
        expect(isObjectLike(false)).toBeFalse()
        expect(isObjectLike(true)).toBeFalse()
        expect(isObjectLike(-1)).toBeFalse()
        expect(isObjectLike(0)).toBeFalse()
        expect(isObjectLike(1)).toBeFalse()
        expect(isObjectLike(-Infinity)).toBeFalse()
        expect(isObjectLike(Infinity)).toBeFalse()
        expect(isObjectLike(NaN)).toBeFalse()
        expect(isObjectLike(-1n)).toBeFalse()
        expect(isObjectLike(0n)).toBeFalse()
        expect(isObjectLike(1n)).toBeFalse()
        expect(isObjectLike("")).toBeFalse()
        expect(isObjectLike("abc")).toBeFalse()
        expect(isObjectLike(Symbol("abc"))).toBeFalse()
    })
})
